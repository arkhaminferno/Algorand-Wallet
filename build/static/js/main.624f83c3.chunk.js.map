{"version":3,"sources":["components/footer/footer.js","serviceWorker.js","index.js","App.js","components/balance/balance.js","components/toast/transactiontoast.js","components/inputfield/note.js","components/accounts/accounts.js","components/address/address.js","components/buttons/generate.js","components/navbar/navbar.js","components/buttons/sendTransaction.js","components/inputfield/address.js","components/inputfield/amount.js","components/modal/mnemonic.js","components/logo/logo.js"],"names":["Footer","className","color","dark","id","href","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","require","useState","account","setAccount","generatedaccounts","setGeneratedaccounts","params","setParams","paramsLoaded","setParamsLoaded","mnemonickey","setMnemonickey","showMnemonic","setShowmnemonic","addressinput","setAddressinput","amountinput","setAmountinput","showtoast","setShowtoast","balance","setBalance","note","setNote","txnID","setTxnID","setTxnsent","setSeconds","useEffect","getParams","interval","setInterval","seconds","balanceGetter","addr","clearInterval","a","axios","get","res","data","err","log","address","amount","e","transactionbuilder","algosdk","mnemonicToSecretKey","secretkey","sk","to","notedata","Number","parseInt","endRound","txn","from","fee","firstRound","lastRound","genesisID","genesisHash","encodeObj","signedTxn","signTransaction","blob","transactionBroadcaster","post","Buffer","headers","txId","toggletoast","toggleMnemonic","fluid","transactionID","closetoast","placeholder","onChange","preventDefault","value","onClick","alert","generatedAccount","generateAccount","flag","generatedkey","closeModal","map","index","publickey","privatekey","key","exportsk","mnemonic","element","createElement","file","Blob","type","URL","createObjectURL","download","body","appendChild","click","downloadTxtFile","secretKeyToMnemonic","obj","props","src","height","width","transactiontoast","show","onClose","Header","alt","Body","style","fontSize","wordWrap","required","accounts","hover","size","variant","margin","padding","textAlign","generate","navbar","Brand","Link","sendTransaction","input","min","Title","logo","roundedCircle"],"mappings":"kHAAA,4CA4CeA,IAzCf,WACE,OACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAAQC,MAAM,OAAOC,MAAI,GACvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAaC,GAAG,eACd,6BACE,yDAEF,yBAAKH,UAAU,gBACb,6BACE,uBACEI,KAAK,oCACLD,GAAG,aACHE,OAAO,UAHT,aAQF,6BACE,uBAAGD,KAAK,6BAA6BD,GAAG,cAAxC,UAIF,6BACE,uBACEC,KAAK,+BACLD,GAAG,aACHE,OAAO,UAHT,kB,oMChBIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,sQEvHnBC,EAAQ,KA4QFb,IArPf,WAAgB,IAAD,EACiBc,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEqCF,mBAAS,IAF9C,mBAENG,EAFM,KAEaC,EAFb,OAGeJ,mBAAS,IAHxB,mBAGNK,EAHM,KAGEC,EAHF,OAI2BN,oBAAS,GAJpC,mBAINO,EAJM,KAIQC,EAJR,OAKyBR,mBAAS,IALlC,mBAKNS,EALM,KAKOC,EALP,OAM2BV,oBAAS,GANpC,mBAMNW,EANM,KAMQC,EANR,OAO2BZ,mBAAS,IAPpC,mBAONa,EAPM,KAOQC,EAPR,OAQyBd,mBAAS,GARlC,mBAQNe,EARM,KAQOC,GARP,QASqBhB,oBAAS,GAT9B,qBASNiB,GATM,MASKC,GATL,SAUiBlB,mBAAS,GAV1B,qBAUNmB,GAVM,MAUGC,GAVH,SAWWpB,mBAAS,IAXpB,qBAWNqB,GAXM,MAWAC,GAXA,SAYatB,mBAAS,IAZtB,qBAYNuB,GAZM,MAYCC,GAZD,SAaiBxB,oBAAS,GAb1B,qBAaGyB,IAbH,gBAciBzB,mBAAS,GAd1B,qBAcG0B,IAdH,gBAeW1B,mBAAS,IAfpB,iCAiBb2B,qBAAU,WACRC,KACA,IAAMC,EAAWC,aAAY,WAC3BJ,IAAW,SAACK,GAAD,OAAaA,EAAU,KAClCC,GAAc/B,EAAQgC,QACrB,KACH,OAAO,kBAAMC,cAAcL,MAC1B,IAGH,IAAMD,GAAS,uCAAG,sBAAAO,EAAA,sDAChBC,IACGC,IAAI,8DACJ7C,MAAK,SAAC8C,GACLhC,EAAUgC,EAAIC,MACd/B,GAAgB,MAEjBb,OAAM,SAAC6C,GACN3C,QAAQ4C,IAAID,MARA,2CAAH,qDA0BTR,GAAgB,SAACU,GACjBA,GACFN,IACGC,IADH,0DAC0DK,IACvDlD,MAAK,SAAC8C,GACLlB,GAAWkB,EAAIC,KAAKI,WAErBhD,OAAM,SAACiD,GACN/C,QAAQ4C,IAAIG,OAMdC,GAAkB,uCAAG,4CAAAV,EAAA,sDAEvB,2JACcW,IAAQC,oBADtB,4JAEEL,EAAUzC,EAAQgC,KAClBe,EAAY/C,EAAQgD,GACpBC,EAAKrC,EACLsC,EAAW9B,GACXsB,EAASS,OAAOC,SAAStC,GACzBuC,EAAWjD,EAAO,cAAgBgD,SAAS,KAC3CE,EAAM,CACRC,KAAMd,EACNQ,GAAIA,EACJO,IAAKpD,EAAO,WACZsC,OAAQA,EACRe,WAAYrD,EAAO,cACnBsD,UAAWL,EACXM,UAAWvD,EAAO,cAClBwD,YAAaxD,EAAO,gBACpBgB,KAAMyB,IAAQgB,UAAU,CAAEX,cAGxBY,EAAYjB,IAAQkB,gBAAgBT,EAAKP,GACzCiB,EAAOF,EAAUE,KACrBC,GAAuBD,GAxBE,4CAAH,qDA4BlBC,GAAsB,uCAAG,WAAOD,GAAP,SAAA9B,EAAA,sDAC7BC,IACG+B,KACC,sDACAC,EAAOZ,KAAKS,GACZ,CACEI,QAAS,CACP,eAAgB,0BAIrB7E,MAAK,SAAC8C,GACLd,GAASc,EAAIC,KAAK+B,MAClB7C,IAAW,GACX8C,QAdyB,2CAAH,sDAoCtBA,GAAc,WAClBrD,IAAa,IAWTsD,GAAiB,WACrB5D,GAAiBD,IAgCnB,OACE,yBAAKvC,UAAU,SAASqG,OAAK,GAC3B,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAWrG,UAAU,OACnB,kBAAC,IAAD,CACE6C,UAAWA,GACXyD,cAAenD,GACfoD,WAjDW,WACjBzD,IAAa,GACbO,IAAW,MAiDP,kBAAC,IAAD,CAAWrD,UAAU,mBAAmBqG,OAAK,GAC3C,yBAAKrG,UAAU,gBACb,6BACE,kBAAC,IAAD,OAEF,6BACE,kBAAC,IAAD,CAAe+C,QAASA,MAG1B,6BACE,kBAAC,IAAD,CAASuB,QAASzC,EAAQgC,QAE5B,6BACE,kBAAC,IAAD,CAAc2C,YAAY,KAAKC,SArCf,SAACjC,GAC3BA,EAAEkC,iBACFhE,EAAgB8B,EAAEnE,OAAOsG,WAqCjB,6BACE,kBAAC,IAAD,CAAaH,YAAY,SAASC,SAnCnB,SAACjC,GAC1BA,EAAEkC,iBACF9D,GAAe4B,EAAEnE,OAAOsG,WAmChB,6BACE,kBAAC,IAAD,CAAMH,YAAY,OAAOC,SAjCZ,SAACjC,GACxBA,EAAEkC,iBACFxD,GAAQsB,EAAEnE,OAAOsG,WAiCT,6BACE,kBAAC,IAAD,CAAiBC,QAvDP,WAChBzE,EACFsC,KAEAoC,MAAM,8CAsDF,6BACA,yBAAK7G,UAAU,gBACb,kBAAC,IAAD,CAAU4G,QA7KK,WACvB,IAAIE,EAAmBpC,IAAQqC,kBAC/BjF,EAAWgF,GACXlD,GAAckD,EAAiBjD,MAC/B7B,EAAqB,GAAD,mBAAKD,GAAL,CAAwB+E,SA2KtC,yBAAK9G,UAAU,YACb,kBAAC,IAAD,CACEgH,KAAMzE,EACN0E,aAAc5E,EACd6E,WAxEO,WACjB1E,GAAgB,MAyEPT,EAAkBoF,KAAI,SAACtF,EAASuF,GAC/B,OACE,kBAAC,IAAD,CACEC,UAAWxF,EAAQgC,KACnByD,WAAYzF,EAAQgD,GACpB0C,IAAKH,EACLI,SAAU,YAzGF,SAACC,GACvB,IAAMC,EAAU3G,SAAS4G,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAACJ,GAAW,CAAEK,KAAM,eAC1CJ,EAAQtH,KAAO2H,IAAIC,gBAAgBJ,GACnCF,EAAQO,SAAW,iBACnBlH,SAASmH,KAAKC,YAAYT,GAC1BA,EAAQU,QAqGQC,CADe3D,IAAQ4D,oBAAoBzG,EAAQgD,MAGrD4C,SAAU,kBAvLC7C,EAuLuB/C,EAAQgD,GAtLxDvC,EAAeoC,IAAQ4D,oBAAoB1D,SAC3CwB,KAFwB,IAACxB,GAwLXgC,QAAS,WArHD,IAAC2B,EACvBzG,EADuByG,EAsHS1G,GApHhC+B,GAAc2E,EAAI1E,eA4HhB,kBAAC,IAAD,U,yDCzRN,4BAuBed,IAff,SAAiByF,GACf,OACE,kBAAC,IAAD,CAAWxI,UAAU,SAASG,GAAG,cAC/B,yBAAKH,UAAU,oBACb,6CAEGwI,EAAMzF,QAFT,OAIE,yBAAK0F,IAAI,iBAAiBC,OAAO,OAAOC,MAAM,c,gCChBxD,4BAmCeC,IA1Bf,SAA0BJ,GACxB,OACE,kBAAC,IAAD,CAAOK,KAAML,EAAM3F,UAAWiG,QAASN,EAAMjC,YAC3C,kBAAC,IAAMwC,OAAP,KACE,yBAAKN,IAAI,2BAA2BzI,UAAU,eAAegJ,IAAI,KACjE,4BAAQhJ,UAAU,WAAlB,YACA,iDAGF,kBAAC,IAAMiJ,KAAP,KACE,uBAAGC,MAAO,CAAEC,SAAU,UAAWC,SAAU,eAA3C,0BAC0BZ,EAAMlC,cADhC,KAEK,IACL,6BACA,uBACElG,KAAI,6CAAwCoI,EAAMlC,eAClDjG,OAAO,UAEN,IAJH,mCAKmC,S,gCC5B3C,4BAsBe4C,IAbf,SAAcuF,GACZ,OACE,kBAAC,IAAD,CAAWxI,UAAU,UACnB,2BACE8H,KAAK,OACLtB,YAAagC,EAAMhC,YACnBC,SAAU+B,EAAM/B,SAChB4C,UAAQ,O,gCChBhB,qCAoDeC,IA3Cf,SAAkBd,GAChB,OACE,kBAAC,IAAD,CAAOe,OAAK,GACV,+BACE,4BACE,4BACG,IACD,yBAAKvJ,UAAU,wBACb,wCACA,iCAAOwI,EAAMnB,WACb,6BACA,6BACE,kBAAC,IAAD,CAAQmC,KAAK,KAAKrJ,GAAG,YAAYyG,QAAS4B,EAAM5B,SAAhD,mBAIF,6BACA,yBAAK5G,UAAU,oBACb,6BACE,kBAAC,IAAD,CACEG,GAAG,MACHqJ,KAAK,KACLC,QAAQ,SACR7C,QAAS4B,EAAMf,UAJjB,uBAFJ,OAYE,6BACE,kBAAC,IAAD,CAAQtH,GAAG,MAAMqJ,KAAK,KAAK5C,QAAS4B,EAAMhB,UAA1C,0B,gCCvClB,4BAuBelD,IAff,SAAiBkE,GACf,OACE,kBAAC,IAAD,CAAWxI,UAAU,SAASG,GAAG,cAC/B,yBAAKH,UAAU,kBACb,uBAAGkJ,MAAO,CAAEQ,OAAQ,IAAKC,QAAS,IAAKC,UAAW,WAAlD,wBAGA,uBAAGV,MAAO,CAAEC,SAAU,QAASC,SAAU,eACtCZ,EAAMlE,a,gCChBjB,4BAgBeuF,IARf,SAAkBrB,GAChB,OACE,kBAAC,IAAD,CAAQrI,GAAG,YAAYyG,QAAS4B,EAAM5B,SAAtC,6B,gCCVJ,qCA0BekD,IAnBf,WACE,OACE,kBAAC,IAAD,CAAQ3J,GAAG,aACT,kBAAC,IAAO4J,MAAR,CAAc3J,KAAK,yBAAyBC,OAAO,UACjD,yBAAKqI,OAAO,MAAMC,MAAM,MAAMF,IAAI,oBAEpC,kBAAC,IAAD,CAAKzI,UAAU,WACb,kBAAC,IAAIgK,KAAL,CACE7J,GAAG,aACHC,KAAK,yCACLC,OAAO,UAHT,uB,gCCdR,oCAmBe4J,IAVf,SAAyBzB,GACvB,OACE,kBAAC,IAAD,CAAWxI,UAAU,SAASqG,OAAK,GACjC,kBAAC,IAAD,CAAQO,QAAS4B,EAAM5B,QAASkB,KAAK,SAAS3H,GAAG,aAAjD,gB,gCCZN,4BAqBe+J,IAbf,SAAe1B,GACb,OACE,kBAAC,IAAD,CAAWxI,UAAU,UACnB,2BACE8H,KAAK,OACLtB,YAAagC,EAAMhC,YACnBC,SAAU+B,EAAM/B,SAChB4C,UAAQ,O,gCCfhB,4BAsBe9E,IAdf,SAAgBiE,GACd,OACE,kBAAC,IAAD,CAAWxI,UAAU,UACnB,2BACE8H,KAAK,SACLtB,YAAagC,EAAMhC,YACnBC,SAAU+B,EAAM/B,SAChB0D,IAAI,IACJd,UAAQ,O,gCChBhB,oCA0Be5B,IAhBf,SAAkBe,GAChB,OACE,kBAAC,IAAD,CAAOK,KAAML,EAAMxB,MACjB,kBAAC,IAAM+B,OAAP,KACE,kBAAC,IAAMqB,MAAP,sBAEF,kBAAC,IAAMnB,KAAP,KAAaT,EAAMvB,cACnB,kBAAC,IAAMlH,OAAP,KACE,kBAAC,IAAD,CAAQ0J,QAAQ,YAAYtJ,GAAG,YAAYyG,QAAS4B,EAAMtB,YAA1D,a,gCClBR,qCAoBemD,IAbf,WACE,OACE,kBAAC,IAAD,CAAWrK,UAAU,UAAUqG,OAAK,GAClC,kBAAC,IAAD,CACElG,GAAG,OACHsI,IAAI,oBACJzI,UAAU,SACVsK,eAAa,Q","file":"static/js/main.624f83c3.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, Container, NavbarBrand } from \"react-bootstrap\";\n\nfunction Footer() {\n  return (\n    <div className=\"center\">\n      <Navbar color=\"dark\" dark>\n        <Container>\n          <NavbarBrand id=\"footer-name\">\n            <div>\n              <p>Developed by Kumar Gaurav</p>\n            </div>\n            <div className=\"footer-align\">\n              <div>\n                <a\n                  href=\"www.linkedin.com/in/arkhaminferno\"\n                  id=\"footerHead\"\n                  target=\"_blank\"\n                >\n                  LinkedIn\n                </a>\n              </div>\n              <div>\n                <a href=\"mailto:gauravpsp@gmail.com\" id=\"footerHead\">\n                  Email\n                </a>\n              </div>\n              <div>\n                <a\n                  href=\"www.github.com/arkhaminferno\"\n                  id=\"footerHead\"\n                  target=\"_blank\"\n                >\n                  Github\n                </a>\n              </div>\n            </div>\n          </NavbarBrand>\n        </Container>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default Footer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport algosdk from \"algosdk\";\nimport BalanceDetail from \"./components/balance/balance\";\nimport Toasttxn from \"./components/toast/transactiontoast\";\nimport Note from \"./components/inputfield/note\";\nimport AccountDisplay from \"./components/accounts/accounts\";\nimport Address from \"./components/address/address\";\nimport { Container } from \"react-bootstrap\";\nimport Generate from \"./components/buttons/generate\";\nimport NavbarHeading from \"./components/navbar/navbar\";\nimport SendTransaction from \"./components/buttons/sendTransaction\";\nimport AddressInput from \"./components/inputfield/address\";\nimport AmountInput from \"./components/inputfield/amount\";\nimport MnemonicModal from \"./components/modal/mnemonic\";\nimport Logo from \"./components/logo/logo\";\nimport Footer from \"./components/footer/footer\";\nvar fs = require(\"fs\");\n/**\n * This component is the parent component responsible for \n - Ability to create a wallet.\n -  Display balance\n - Send a transaction\n * @state account: object -> loads the currently selected account details \n * @state generatedaccounts: array -> Stores the account details of generated accounts by the user. \n * @state params: object -> stores the predicted parameters for bulding transaction object\n * @state paramsLoaded: boolean -> true when all the parameters are loaded into the state of this component.\n * @state mnemonickey: string -> stores the mnemonic key of  the selected account by the user. \n * @state showMnemonic: boolean -> flag boolean value for displaying mnemonic of the selected account of user\n * @state addressinput: string -> stores the address of the receiver account.\n * @state amountinput: integer -> stores the amount \n * @state showtoast: boolean -> flag for displaying toast notification.\n * @state balance: integer -> stores the balance of the currently selected account.\n * @state note : string -> stores the string given by a user for sending transaction.\n * @state txnID: string -> stores transaction ID of the successfull transaction\n * @state txnsent:boolean -> flag for indicating whether the transaction is successfull or not.\n * @state seconds:intger -> for refetching balance component every 3 seconds\n * @author [Kumar Gaurav](https://github.com/arkhaminferno)\n */\n\nfunction App() {\n  const [account, setAccount] = useState({});\n  const [generatedaccounts, setGeneratedaccounts] = useState([]);\n  const [params, setParams] = useState({});\n  const [paramsLoaded, setParamsLoaded] = useState(false);\n  const [mnemonickey, setMnemonickey] = useState(\"\");\n  const [showMnemonic, setShowmnemonic] = useState(false);\n  const [addressinput, setAddressinput] = useState(\"\");\n  const [amountinput, setAmountinput] = useState(0);\n  const [showtoast, setShowtoast] = useState(false);\n  const [balance, setBalance] = useState(0);\n  const [note, setNote] = useState(\"\");\n  const [txnID, setTxnID] = useState(\"\");\n  const [txnsent, setTxnsent] = useState(false);\n  const [seconds, setSeconds] = useState(0);\n  const [addr, setAddr] = useState(\"\");\n\n  useEffect(() => {\n    getParams();\n    const interval = setInterval(() => {\n      setSeconds((seconds) => seconds + 1);\n      balanceGetter(account.addr); // yaha se mai state me stored address le rha hu\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Function for getting parameters from the algorand blockchain\n  const getParams = async () => {\n    axios\n      .get(\"https://api.testnet.algoexplorer.io/v2/transactions/params\")\n      .then((res) => {\n        setParams(res.data);\n        setParamsLoaded(true);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  // Function for generating wallets\n  const accountGenerator = () => {\n    let generatedAccount = algosdk.generateAccount();\n    setAccount(generatedAccount);\n    balanceGetter(generatedAccount.addr);\n    setGeneratedaccounts([...generatedaccounts, generatedAccount]);\n  };\n\n  // Function for generating seed phrase from secret key\n  const mnemonicGenerator = (secretkey) => {\n    setMnemonickey(algosdk.secretKeyToMnemonic(secretkey));\n    toggleMnemonic();\n  };\n\n  // Function  for getting balance of an address\n  const balanceGetter = (address) => {\n    if (address) {\n      axios\n        .get(`https://api.testnet.algoexplorer.io/v2/accounts/${address}`)\n        .then((res) => {\n          setBalance(res.data.amount);\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    }\n  };\n\n  // Function for creating,signing transaction object\n  const transactionbuilder = async () => {\n    const passphrase =\n      \"tomato riot sting festival atom hire outer census siege clog excuse bag electric wasp taxi wealth key pave party child craft damage group absent diamond\";\n    let myAccount = algosdk.mnemonicToSecretKey(passphrase);\n    let address = account.addr;\n    let secretkey = account.sk;\n    let to = addressinput;\n    let notedata = note;\n    let amount = Number.parseInt(amountinput);\n    let endRound = params[\"last-round\"] + parseInt(1000);\n    let txn = {\n      from: address,\n      to: to,\n      fee: params[\"min-fee\"],\n      amount: amount,\n      firstRound: params[\"last-round\"],\n      lastRound: endRound,\n      genesisID: params[\"genesis-id\"],\n      genesisHash: params[\"genesis-hash\"],\n      note: algosdk.encodeObj({ notedata }),\n    };\n\n    let signedTxn = algosdk.signTransaction(txn, secretkey);\n    let blob = signedTxn.blob;\n    transactionBroadcaster(blob);\n  };\n\n  // Function for sending the transaction into the Algorand blockchain\n  const transactionBroadcaster = async (blob) => {\n    axios\n      .post(\n        \"https://api.testnet.algoexplorer.io/v2/transactions\",\n        Buffer.from(blob),\n        {\n          headers: {\n            \"Content-Type\": \"application/x-binary\",\n          },\n        }\n      )\n      .then((res) => {\n        setTxnID(res.data.txId);\n        setTxnsent(true);\n        toggletoast();\n      });\n  };\n\n  // Function for selecting account from list of generated accounts\n  const selectedAccount = (obj) => {\n    setAccount(obj);\n    balanceGetter(obj.addr);\n  };\n\n  // Exporting seed phrase\n\n  const downloadTxtFile = (mnemonic) => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([mnemonic], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = \"seedPhrase.txt\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n\n  // set flag values to display a component\n  const toggletoast = () => {\n    setShowtoast(true);\n  };\n  const closetoast = () => {\n    setShowtoast(false);\n    setTxnsent(false);\n  };\n\n  const txnstatus = () => {\n    setTxnsent(false);\n  };\n\n  const toggleMnemonic = () => {\n    setShowmnemonic(!showMnemonic);\n  };\n  const closeModal = () => {\n    setShowmnemonic(false);\n  };\n\n  // form validator function\n\n  const formValidator = () => {\n    if (paramsLoaded) {\n      transactionbuilder();\n    } else {\n      alert(\"please check input or reload the page\");\n    }\n  };\n\n  // input handlers\n  const addressinputhandler = (e) => {\n    e.preventDefault();\n    setAddressinput(e.target.value);\n  };\n\n  const amountinputhandler = (e) => {\n    e.preventDefault();\n    setAmountinput(e.target.value);\n  };\n\n  const noteinputhandler = (e) => {\n    e.preventDefault();\n    setNote(e.target.value);\n  };\n\n  return (\n    <div className=\"parent\" fluid>\n      <NavbarHeading />\n      <Container className=\"App\">\n        <Toasttxn\n          showtoast={showtoast}\n          transactionID={txnID}\n          closetoast={closetoast}\n        />\n        <Container className=\"parent-jumbotron\" fluid>\n          <div className=\"wallet-main \">\n            <div>\n              <Logo />\n            </div>\n            <div>\n              <BalanceDetail balance={balance} />\n            </div>\n\n            <div>\n              <Address address={account.addr} />\n            </div>\n            <div>\n              <AddressInput placeholder=\"To\" onChange={addressinputhandler} />\n            </div>\n            <div>\n              <AmountInput placeholder=\"Amount\" onChange={amountinputhandler} />\n            </div>\n            <div>\n              <Note placeholder=\"Note\" onChange={noteinputhandler} />\n            </div>\n            <div>\n              <SendTransaction onClick={formValidator} />\n            </div>\n          </div>\n          <br></br>\n          <div className=\"generate-btn\">\n            <Generate onClick={accountGenerator} />\n          </div>\n          <div className=\"accounts\">\n            <MnemonicModal\n              flag={showMnemonic}\n              generatedkey={mnemonickey}\n              closeModal={closeModal}\n            />\n            {generatedaccounts.map((account, index) => {\n              return (\n                <AccountDisplay\n                  publickey={account.addr}\n                  privatekey={account.sk}\n                  key={index}\n                  exportsk={() => {\n                    let mnemonic = algosdk.secretKeyToMnemonic(account.sk)\n                    downloadTxtFile(mnemonic);\n                  }}\n                  mnemonic={() => mnemonicGenerator(account.sk)}\n                  onClick={() => {\n                    selectedAccount(account);\n                  }}\n                />\n              );\n            })}\n          </div>\n        </Container>\n      </Container>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n/**\n * This component will display balance of a address.\n * @props balance: -> displays the balance of a address\n *\n * @author [Kumar Gaurav](https://github.com/arkhaminferno)\n */\nfunction balance(props) {\n  return (\n    <Container className=\"center\" id=\"footerHead\">\n      <div className=\"horizontal-align\">\n        <div>\n          Balance: &nbsp;\n          {props.balance}\n          &nbsp;\n          <img src=\"/algosmall.png\" height=\"18px\" width=\"17px\" />\n        </div>\n      </div>\n    </Container>\n  );\n}\n\nexport default balance;\n","import React from \"react\";\nimport { Toast, Container } from \"react-bootstrap\";\n/**\n * This component will generate toast notification after successfull transaction confirmation.\n * @props transactionID: -> this will display the txn ID on the toast body.\n * @props showtoast: -> a boolean value for displaying the toast notification.\n * @props closetoast:-> a boolean value for closing the toast notification.\n * @author [Kumar Gaurav](https://github.com/arkhaminferno)\n */\nfunction transactiontoast(props) {\n  return (\n    <Toast show={props.showtoast} onClose={props.closetoast}>\n      <Toast.Header>\n        <img src=\"holder.js/20x20?text=%20\" className=\"rounded mr-2\" alt=\"\" />\n        <strong className=\"mr-auto\">Success!</strong>\n        <small>2 seconds ago</small>\n      </Toast.Header>\n\n      <Toast.Body>\n        <p style={{ fontSize: \"smaller\", wordWrap: \"break-word\" }}>\n          Your Transaction id is {props.transactionID}.\n        </p>{\" \"}\n        <br />\n        <a\n          href={`https://testnet.algoexplorer.io/tx/${props.transactionID}`}\n          target=\"_blank\"\n        >\n          {\" \"}\n          Click to Verify at Algo Explorer{\" \"}\n        </a>\n      </Toast.Body>\n    </Toast>\n  );\n}\n\nexport default transactiontoast;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n/**\n * This component will work as a input field.\n * @props placeholder: -> this will display the placeholder on input field.\n * @props onChange: -> calls the parent component function for submitting the type value into the parent state.\n *\n * @author [Kumar Gaurav](https://github.com/arkhaminferno)\n */\nfunction note(props) {\n  return (\n    <Container className=\"center\">\n      <input\n        type=\"text\"\n        placeholder={props.placeholder}\n        onChange={props.onChange}\n        required\n      />\n    </Container>\n  );\n}\n\nexport default note;\n","import React from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\n/**\n * This component will display balance of a address.\n * @props publickey: -> displays the address of a wallet\n * @props mnemonic -> displays the mnemonic key of an address\n * @props onClick -> selects a specific wallet from a list of generated wallets\n * @author [Kumar Gaurav](https://github.com/arkhaminferno)\n */\nfunction accounts(props) {\n  return (\n    <Table hover>\n      <tbody>\n        <tr>\n          <td>\n            {\" \"}\n            <div className=\"vertical-align-space\">\n              <div>Address</div>\n              <div> {props.publickey}</div>\n              <br />\n              <div>\n                <Button size=\"sm\" id=\"btn-fixed\" onClick={props.onClick}>\n                  Select Account\n                </Button>\n              </div>\n              <br />\n              <div className=\"horizontal-align\">\n                <div>\n                  <Button\n                    id=\"btn\"\n                    size=\"sm\"\n                    variant=\"danger\"\n                    onClick={props.mnemonic}\n                  >\n                    Reveal Seed Phrase\n                  </Button>\n                </div>\n                &nbsp;\n                <div>\n                  <Button id=\"btn\" size=\"sm\" onClick={props.exportsk}>\n                    Export wallet\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default accounts;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n/**\n * This component will display address.\n *\n *\n * @author [Kumar Gaurav](https://github.com/arkhaminferno)\n */\nfunction address(props) {\n  return (\n    <Container className=\"center\" id=\"footerHead\">\n      <div className=\"vertical-align\">\n        <p style={{ margin: \"0\", padding: \"0\", textAlign: \"center\" }}>\n          Your Wallet Address:\n        </p>\n        <p style={{ fontSize: \"small\", wordWrap: \"break-word\" }}>\n          {props.address}\n        </p>\n      </div>\n    </Container>\n  );\n}\n\nexport default address;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n/**\n * This component will trigger generate wallet function on click of the button.\n * @props onClick: -> calls the parent component function for submitting the value into the parent state.\n *\n * @author [Kumar Gaurav](https://github.com/arkhaminferno)\n */\nfunction generate(props) {\n  return (\n    <Button id=\"btn-fixed\" onClick={props.onClick}>\n      Generate Wallet Address\n    </Button>\n  );\n}\n\nexport default generate;\n","import React from \"react\";\nimport { Navbar, Nav, Button, Form, FormControl } from \"react-bootstrap\";\n/**\n * This component is resposible for hyperlinking with Algorand faucet and Meld.gold website.\n *\n * @author [Kumar Gaurav](https://github.com/arkhaminferno)\n */\nfunction navbar() {\n  return (\n    <Navbar id=\"nav-style\">\n      <Navbar.Brand href=\"https://www.meld.gold/\" target=\"_blank\">\n        <img height=\"30%\" width=\"30%\" src=\"/meld-logo.png\" />\n      </Navbar.Brand>\n      <Nav className=\"ml-auto\">\n        <Nav.Link\n          id=\"footerHead\"\n          href=\"https://bank.testnet.algorand.network/\"\n          target=\"_blank\"\n        >\n          Algorand Faucet\n        </Nav.Link>\n      </Nav>\n    </Navbar>\n  );\n}\n\nexport default navbar;\n","import React from \"react\";\nimport { Button, Container } from \"react-bootstrap\";\n/**\n * This component will trigger send transaction function on click of the button.\n * @props onClick: -> calls the parent component function for submitting the value into the parent state.\n *\n * @author [Kumar Gaurav](https://github.com/arkhaminferno)\n */\n\nfunction sendTransaction(props) {\n  return (\n    <Container className=\"center\" fluid>\n      <Button onClick={props.onClick} type=\"submit\" id=\"btn-fixed\">\n        send Algo\n      </Button>\n    </Container>\n  );\n}\n\nexport default sendTransaction;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n/**\n * This component will work as a input field .\n * @props placeholder: -> this will display the placeholder on input field.\n * @props onChange: -> calls the parent component function for submitting the type value into the parent state.\n * @author [Kumar Gaurav](https://github.com/arkhaminferno)\n */\nfunction input(props) {\n  return (\n    <Container className=\"center\">\n      <input\n        type=\"text\"\n        placeholder={props.placeholder}\n        onChange={props.onChange}\n        required\n      />\n    </Container>\n  );\n}\n\nexport default input;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n/**\n * This component will work as a input field.\n * @props placeholder: -> this will display the placeholder on input field.\n * @props onChange: -> calls the parent component function for submitting the type value into the parent state.\n * @author [Kumar Gaurav](https://github.com/arkhaminferno)\n */\nfunction amount(props) {\n  return (\n    <Container className=\"center\">\n      <input\n        type=\"number\"\n        placeholder={props.placeholder}\n        onChange={props.onChange}\n        min=\"0\"\n        required\n      />\n    </Container>\n  );\n}\n\nexport default amount;\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n/**\n * This component will generate modal notification for displaying Seed phrase of an account.\n * @props flag -> a boolean value for displaying the modal.\n * @props generatedkey: -> this will display the seed phrase on Modal body.\n * @props closeModal -> a boolean value for closing the Modal.\n *\n * @author [Kumar Gaurav](https://github.com/arkhaminferno)\n */\nfunction mnemonic(props) {\n  return (\n    <Modal show={props.flag}>\n      <Modal.Header>\n        <Modal.Title>Mnemonic Key</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{props.generatedkey}</Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" id=\"btn-fixed\" onClick={props.closeModal}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default mnemonic;\n","import React from \"react\";\nimport { Container, Image } from \"react-bootstrap\";\n/**\n * This component will display logo of Algorand Blockchain.\n *\n * @author [Kumar Gaurav](https://github.com/arkhaminferno)\n */\nfunction logo() {\n  return (\n    <Container className=\"center \" fluid>\n      <Image\n        id=\"logo\"\n        src=\"/algorandlogo.svg\"\n        className=\"logobg\"\n        roundedCircle\n      />\n    </Container>\n  );\n}\n\nexport default logo;\n"],"sourceRoot":""}